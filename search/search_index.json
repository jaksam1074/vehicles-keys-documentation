{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is the official Vehicles Keys documentation Official FiveM post - Not ready yet Tebex page","title":"Home"},{"location":"give_keys_car_command/","text":"How to give keys with /car command To automatically have keys of a vehicle received with /car command, you can see the examples here","title":"How to give keys with /car command"},{"location":"give_keys_car_command/#how-to-give-keys-with-car-command","text":"To automatically have keys of a vehicle received with /car command, you can see the examples here","title":"How to give keys with /car command"},{"location":"hotwiring_bought_car/","text":"Fix hotwiring bought car Generic script If after you purchase a vehicle you have to hotwire it, you only have to add this simple line of code in your script code, after you know that the vehicle is added in owned_vehicles / player_vehicles table (depending on the framework) You may want to add a Citizen.Wait(2000) before that line in case the vehicle wasn't yet in the table in the moment you triggered the event esx_vehicleshop First step Go to esx_vehicleshop/server/main.lua and search for the following code: And add this line exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( playerId ) Second step Go to esx_vehicleshop/server/main.lua (the same file as before) and search for the following code: And add this line exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( source ) esx_advancedvehicleshop Go to esx_advancedvehicleshop/server/main.lua and search for the following code: And add this line exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( source ) esx_contract Go to esx_contract/server/main.lua and search for the following code: And add these lines exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( _source ) exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( _target ) qb-vehicleshop First step Go to qb-vehicleshop/server.lua and you will have to add the following code after all exports.oxmysql:insert In the example, it will be shown only one time, but you have to add it multiple times And add the following code SetTimeout ( 1000 , function () exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( pData . PlayerData . source ) end ) In certain parts, you will have to replace pData with something else, here it will show where to add the code and on what pData depends Note : the green circles showed in the screenshot must match, so if the first one is for example targetPlayer , the second one must be targetPlayer as well Second step Go to qb-vehicleshop/server.lua (the same file as before) and replace all these events (they are at the bottom of the file) TriggerClientEvent ( 'vehiclekeys:client:SetOwner' , buyerId , plate ) with the following code SetTimeout ( 1000 , function () exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( buyerId ) end ) okokVehicleShop Go to okokVehicleShop/sv_utils.lua and search for the following code: And add this line exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( _source ) s4-vehicleshop Go to s4-vehicleshop/server.lua and search for the following code: And add the following code: SetTimeout ( 1000 , function () exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( src ) end ) Note: this code will work for both oxmysql and ghmattimysql versions t1ger_dealerships First step Go to t1ger_dealerships/server/main.lua and add the following line below all codes (more than one) like as shown in the example exports [ 't1ger_keys' ]: UpdateKeysToDatabase ( props . plate , true ) And add the following line exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( xPlayer . source ) Second step Go to t1ger_dealerships/server/main.lua (same file as before) and search for the following code: And add the following line exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( xPlayer . source )","title":"Fix hotwiring bought car"},{"location":"hotwiring_bought_car/#fix-hotwiring-bought-car","text":"","title":"Fix hotwiring bought car"},{"location":"hotwiring_bought_car/#generic-script","text":"If after you purchase a vehicle you have to hotwire it, you only have to add this simple line of code in your script code, after you know that the vehicle is added in owned_vehicles / player_vehicles table (depending on the framework) You may want to add a Citizen.Wait(2000) before that line in case the vehicle wasn't yet in the table in the moment you triggered the event","title":"Generic script"},{"location":"hotwiring_bought_car/#esx_vehicleshop","text":"","title":"esx_vehicleshop"},{"location":"hotwiring_bought_car/#first-step","text":"Go to esx_vehicleshop/server/main.lua and search for the following code: And add this line exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( playerId )","title":"First step"},{"location":"hotwiring_bought_car/#second-step","text":"Go to esx_vehicleshop/server/main.lua (the same file as before) and search for the following code: And add this line exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( source )","title":"Second step"},{"location":"hotwiring_bought_car/#esx_advancedvehicleshop","text":"Go to esx_advancedvehicleshop/server/main.lua and search for the following code: And add this line exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( source )","title":"esx_advancedvehicleshop"},{"location":"hotwiring_bought_car/#esx_contract","text":"Go to esx_contract/server/main.lua and search for the following code: And add these lines exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( _source ) exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( _target )","title":"esx_contract"},{"location":"hotwiring_bought_car/#qb-vehicleshop","text":"","title":"qb-vehicleshop"},{"location":"hotwiring_bought_car/#first-step_1","text":"Go to qb-vehicleshop/server.lua and you will have to add the following code after all exports.oxmysql:insert In the example, it will be shown only one time, but you have to add it multiple times And add the following code SetTimeout ( 1000 , function () exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( pData . PlayerData . source ) end ) In certain parts, you will have to replace pData with something else, here it will show where to add the code and on what pData depends Note : the green circles showed in the screenshot must match, so if the first one is for example targetPlayer , the second one must be targetPlayer as well","title":"First step"},{"location":"hotwiring_bought_car/#second-step_1","text":"Go to qb-vehicleshop/server.lua (the same file as before) and replace all these events (they are at the bottom of the file) TriggerClientEvent ( 'vehiclekeys:client:SetOwner' , buyerId , plate ) with the following code SetTimeout ( 1000 , function () exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( buyerId ) end )","title":"Second step"},{"location":"hotwiring_bought_car/#okokvehicleshop","text":"Go to okokVehicleShop/sv_utils.lua and search for the following code: And add this line exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( _source )","title":"okokVehicleShop"},{"location":"hotwiring_bought_car/#s4-vehicleshop","text":"Go to s4-vehicleshop/server.lua and search for the following code: And add the following code: SetTimeout ( 1000 , function () exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( src ) end ) Note: this code will work for both oxmysql and ghmattimysql versions","title":"s4-vehicleshop"},{"location":"hotwiring_bought_car/#t1ger_dealerships","text":"","title":"t1ger_dealerships"},{"location":"hotwiring_bought_car/#first-step_2","text":"Go to t1ger_dealerships/server/main.lua and add the following line below all codes (more than one) like as shown in the example exports [ 't1ger_keys' ]: UpdateKeysToDatabase ( props . plate , true ) And add the following line exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( xPlayer . source )","title":"First step"},{"location":"hotwiring_bought_car/#second-step_2","text":"Go to t1ger_dealerships/server/main.lua (same file as before) and search for the following code: And add the following line exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( xPlayer . source )","title":"Second step"},{"location":"qb-core_installation/","text":"QB-Core installation tutorial The installation for QB-Core it's a bit longer than the ESX one where it's almost all automated Adding the items To add the new items, you have to edit qb-core/shared/items.lua file and add at the bottom of the table the following code -- Vehicles Keys items [ 'vehicle_alarm_1' ] = {[ 'name' ] = 'vehicle_alarm_1' , [ 'label' ] = 'Vehicle alarm level 1' , [ 'weight' ] = 500 , [ 'type' ] = 'item' , [ 'image' ] = 'your_image.png' , [ 'unique' ] = false , [ 'useable' ] = true , [ 'shouldClose' ] = true , [ 'combinable' ] = nil , [ 'description' ] = 'Vehicle alarm level 1' }, [ 'vehicle_alarm_2' ] = {[ 'name' ] = 'vehicle_alarm_2' , [ 'label' ] = 'Vehicle alarm level 2' , [ 'weight' ] = 500 , [ 'type' ] = 'item' , [ 'image' ] = 'your_image.png' , [ 'unique' ] = false , [ 'useable' ] = true , [ 'shouldClose' ] = true , [ 'combinable' ] = nil , [ 'description' ] = 'Vehicle alarm level 2' }, [ 'vehicle_alarm_3' ] = {[ 'name' ] = 'vehicle_alarm_3' , [ 'label' ] = 'Vehicle alarm level 3' , [ 'weight' ] = 500 , [ 'type' ] = 'item' , [ 'image' ] = 'your_image.png' , [ 'unique' ] = false , [ 'useable' ] = true , [ 'shouldClose' ] = true , [ 'combinable' ] = nil , [ 'description' ] = 'Vehicle alarm level 3' }, [ 'vehicle_alarm_4' ] = {[ 'name' ] = 'vehicle_alarm_4' , [ 'label' ] = 'Vehicle alarm level 4' , [ 'weight' ] = 500 , [ 'type' ] = 'item' , [ 'image' ] = 'your_image.png' , [ 'unique' ] = false , [ 'useable' ] = true , [ 'shouldClose' ] = true , [ 'combinable' ] = nil , [ 'description' ] = 'Vehicle alarm level 4' }, Screenshot example: Installing ESX menu To make the script works, you need to install ESX menu This esx_menu_default script is edited by the creator of QB-Core framework, you can find it in QBCore Discord server in conversion channel, or directly from this link","title":"QB-Core installation tutorial"},{"location":"qb-core_installation/#qb-core-installation-tutorial","text":"The installation for QB-Core it's a bit longer than the ESX one where it's almost all automated","title":"QB-Core installation tutorial"},{"location":"qb-core_installation/#adding-the-items","text":"To add the new items, you have to edit qb-core/shared/items.lua file and add at the bottom of the table the following code -- Vehicles Keys items [ 'vehicle_alarm_1' ] = {[ 'name' ] = 'vehicle_alarm_1' , [ 'label' ] = 'Vehicle alarm level 1' , [ 'weight' ] = 500 , [ 'type' ] = 'item' , [ 'image' ] = 'your_image.png' , [ 'unique' ] = false , [ 'useable' ] = true , [ 'shouldClose' ] = true , [ 'combinable' ] = nil , [ 'description' ] = 'Vehicle alarm level 1' }, [ 'vehicle_alarm_2' ] = {[ 'name' ] = 'vehicle_alarm_2' , [ 'label' ] = 'Vehicle alarm level 2' , [ 'weight' ] = 500 , [ 'type' ] = 'item' , [ 'image' ] = 'your_image.png' , [ 'unique' ] = false , [ 'useable' ] = true , [ 'shouldClose' ] = true , [ 'combinable' ] = nil , [ 'description' ] = 'Vehicle alarm level 2' }, [ 'vehicle_alarm_3' ] = {[ 'name' ] = 'vehicle_alarm_3' , [ 'label' ] = 'Vehicle alarm level 3' , [ 'weight' ] = 500 , [ 'type' ] = 'item' , [ 'image' ] = 'your_image.png' , [ 'unique' ] = false , [ 'useable' ] = true , [ 'shouldClose' ] = true , [ 'combinable' ] = nil , [ 'description' ] = 'Vehicle alarm level 3' }, [ 'vehicle_alarm_4' ] = {[ 'name' ] = 'vehicle_alarm_4' , [ 'label' ] = 'Vehicle alarm level 4' , [ 'weight' ] = 500 , [ 'type' ] = 'item' , [ 'image' ] = 'your_image.png' , [ 'unique' ] = false , [ 'useable' ] = true , [ 'shouldClose' ] = true , [ 'combinable' ] = nil , [ 'description' ] = 'Vehicle alarm level 4' },","title":"Adding the items"},{"location":"qb-core_installation/#screenshot-example","text":"","title":"Screenshot example:"},{"location":"qb-core_installation/#installing-esx-menu","text":"To make the script works, you need to install ESX menu This esx_menu_default script is edited by the creator of QB-Core framework, you can find it in QBCore Discord server in conversion channel, or directly from this link","title":"Installing ESX menu"},{"location":"client/internalProgressBar/","text":"Replace/Disable default progress bar Triggered when using progress bar Event RegisterNetEvent ( \"vehicles_keys:internalProgressBar\" , function ( time , text ) end ) Parameters Name Data Type Description time int Progress bar duration in seconds text string Description text Example -- In vehicles_keys/integrations/cl_integrations.lua RegisterNetEvent ( \"vehicles_keys:framework:ready\" , function () -- Disables the default script progress bar (otherwise there would be 2 progress bars) exports [ \"vehicles_keys\" ]: disableScriptEvent ( \"vehicles_keys:internalProgressBar\" ) end ) -- Example to replace the script progress bar with an external one RegisterNetEvent ( \"vehicles_keys:internalProgressBar\" , function ( time , text ) -- The event to activate your external progress bar TriggerEvent ( \"external_progressbar:start\" , time , text ) end )","title":"Replace/Disable default progress bar"},{"location":"client/internalProgressBar/#replacedisable-default-progress-bar","text":"Triggered when using progress bar","title":"Replace/Disable default progress bar"},{"location":"client/internalProgressBar/#event","text":"RegisterNetEvent ( \"vehicles_keys:internalProgressBar\" , function ( time , text ) end )","title":"Event"},{"location":"client/internalProgressBar/#parameters","text":"Name Data Type Description time int Progress bar duration in seconds text string Description text","title":"Parameters"},{"location":"client/internalProgressBar/#example","text":"-- In vehicles_keys/integrations/cl_integrations.lua RegisterNetEvent ( \"vehicles_keys:framework:ready\" , function () -- Disables the default script progress bar (otherwise there would be 2 progress bars) exports [ \"vehicles_keys\" ]: disableScriptEvent ( \"vehicles_keys:internalProgressBar\" ) end ) -- Example to replace the script progress bar with an external one RegisterNetEvent ( \"vehicles_keys:internalProgressBar\" , function ( time , text ) -- The event to activate your external progress bar TriggerEvent ( \"external_progressbar:start\" , time , text ) end )","title":"Example"},{"location":"client/openKeysList/","text":"Open keys list You can trigger this event from anywhere client side to open the keys list menu Event TriggerEvent ( \"vehicles_keys:openKeysList\" )","title":"Open keys list"},{"location":"client/openKeysList/#open-keys-list","text":"You can trigger this event from anywhere client side to open the keys list menu","title":"Open keys list"},{"location":"client/openKeysList/#event","text":"TriggerEvent ( \"vehicles_keys:openKeysList\" )","title":"Event"},{"location":"client/openKeysMenu/","text":"Open remote UI menu You can trigger this event from anywhere client side to open the remote UI menu Event TriggerEvent ( \"vehicles_keys:openKeysMenu\" )","title":"Open remote UI menu"},{"location":"client/openKeysMenu/#open-remote-ui-menu","text":"You can trigger this event from anywhere client side to open the remote UI menu","title":"Open remote UI menu"},{"location":"client/openKeysMenu/#event","text":"TriggerEvent ( \"vehicles_keys:openKeysMenu\" )","title":"Event"},{"location":"client/refreshMineOwnedVehicles/","text":"Refresh self owned vehicles Triggering this event (from client side) will refresh the list of the player's owned vehicles (from owned_vehicles on ESX or player_vehicles on QBCore) This will be useful to update the list of owned vehicles when a player buys a new vehicle, so you can add this line of code in the code right after a successful vehicle purchase Event TriggerServerEvent ( \"vehicles_keys:refreshMineOwnedVehicles\" )","title":"Refresh self owned vehicles"},{"location":"client/refreshMineOwnedVehicles/#refresh-self-owned-vehicles","text":"Triggering this event (from client side) will refresh the list of the player's owned vehicles (from owned_vehicles on ESX or player_vehicles on QBCore) This will be useful to update the list of owned vehicles when a player buys a new vehicle, so you can add this line of code in the code right after a successful vehicle purchase","title":"Refresh self owned vehicles"},{"location":"client/refreshMineOwnedVehicles/#event","text":"TriggerServerEvent ( \"vehicles_keys:refreshMineOwnedVehicles\" )","title":"Event"},{"location":"client/selfGiveVehicleKeys/","text":"Self give vehicle plate You can use this event to self give a vehicle plate, for example in the events where your framework spawns a vehicle with /car command Event TriggerServerEvent ( \"vehicles_keys:selfGiveVehicleKeys\" , plate ) Example -- For ESX, in es_extended/client/main.lua RegisterNetEvent ( 'esx:spawnVehicle' ) AddEventHandler ( 'esx:spawnVehicle' , function ( vehicleName ) local model = ( type ( vehicleName ) == 'number' and vehicleName or GetHashKey ( vehicleName )) if IsModelInCdimage ( model ) then local playerPed = PlayerPedId () local playerCoords , playerHeading = GetEntityCoords ( playerPed ), GetEntityHeading ( playerPed ) ESX . Game . SpawnVehicle ( model , playerCoords , playerHeading , function ( vehicle ) TaskWarpPedIntoVehicle ( playerPed , vehicle , - 1 ) -- VEHICLES KEYS INTEGRATION TriggerServerEvent ( \"vehicles_keys:selfGiveVehicleKeys\" , GetVehicleNumberPlateText ( vehicle )) end ) else TriggerEvent ( 'chat:addMessage' , { args = { '^1SYSTEM' , 'Invalid vehicle model.' }}) end end ) -- For QBCore, in qb-core/client/events.lua RegisterNetEvent ( 'QBCore:Command:SpawnVehicle' , function ( vehName ) local ped = PlayerPedId () local hash = GetHashKey ( vehName ) local veh = GetVehiclePedIsUsing ( ped ) if not IsModelInCdimage ( hash ) then return end RequestModel ( hash ) while not HasModelLoaded ( hash ) do Wait ( 0 ) end if IsPedInAnyVehicle ( ped ) then DeleteVehicle ( veh ) end local vehicle = CreateVehicle ( hash , GetEntityCoords ( ped ), GetEntityHeading ( ped ), true , false ) TaskWarpPedIntoVehicle ( ped , vehicle , - 1 ) SetVehicleFuelLevel ( vehicle , 100.0 ) SetModelAsNoLongerNeeded ( hash ) -- Old event --TriggerEvent(\"vehiclekeys:client:SetOwner\", QBCore.Functions.GetPlate(vehicle)) -- VEHICLES KEYS INTEGRATION TriggerServerEvent ( \"vehicles_keys:selfGiveVehicleKeys\" , QBCore . Functions . GetPlate ( vehicle )) end )","title":"Self give vehicle plate"},{"location":"client/selfGiveVehicleKeys/#self-give-vehicle-plate","text":"You can use this event to self give a vehicle plate, for example in the events where your framework spawns a vehicle with /car command","title":"Self give vehicle plate"},{"location":"client/selfGiveVehicleKeys/#event","text":"TriggerServerEvent ( \"vehicles_keys:selfGiveVehicleKeys\" , plate )","title":"Event"},{"location":"client/selfGiveVehicleKeys/#example","text":"-- For ESX, in es_extended/client/main.lua RegisterNetEvent ( 'esx:spawnVehicle' ) AddEventHandler ( 'esx:spawnVehicle' , function ( vehicleName ) local model = ( type ( vehicleName ) == 'number' and vehicleName or GetHashKey ( vehicleName )) if IsModelInCdimage ( model ) then local playerPed = PlayerPedId () local playerCoords , playerHeading = GetEntityCoords ( playerPed ), GetEntityHeading ( playerPed ) ESX . Game . SpawnVehicle ( model , playerCoords , playerHeading , function ( vehicle ) TaskWarpPedIntoVehicle ( playerPed , vehicle , - 1 ) -- VEHICLES KEYS INTEGRATION TriggerServerEvent ( \"vehicles_keys:selfGiveVehicleKeys\" , GetVehicleNumberPlateText ( vehicle )) end ) else TriggerEvent ( 'chat:addMessage' , { args = { '^1SYSTEM' , 'Invalid vehicle model.' }}) end end ) -- For QBCore, in qb-core/client/events.lua RegisterNetEvent ( 'QBCore:Command:SpawnVehicle' , function ( vehName ) local ped = PlayerPedId () local hash = GetHashKey ( vehName ) local veh = GetVehiclePedIsUsing ( ped ) if not IsModelInCdimage ( hash ) then return end RequestModel ( hash ) while not HasModelLoaded ( hash ) do Wait ( 0 ) end if IsPedInAnyVehicle ( ped ) then DeleteVehicle ( veh ) end local vehicle = CreateVehicle ( hash , GetEntityCoords ( ped ), GetEntityHeading ( ped ), true , false ) TaskWarpPedIntoVehicle ( ped , vehicle , - 1 ) SetVehicleFuelLevel ( vehicle , 100.0 ) SetModelAsNoLongerNeeded ( hash ) -- Old event --TriggerEvent(\"vehiclekeys:client:SetOwner\", QBCore.Functions.GetPlate(vehicle)) -- VEHICLES KEYS INTEGRATION TriggerServerEvent ( \"vehicles_keys:selfGiveVehicleKeys\" , QBCore . Functions . GetPlate ( vehicle )) end )","title":"Example"},{"location":"client/switch_lock/","text":"Switch vehicle lock Triggering this event (from client side) will switch the lock of the vehicle with that plate, so it will remove all keys to other players that the vehicle owner has previously shared Event TriggerServerEvent ( \"vehicles_keys:switchLock\" , plate ) Parameters Name Data Type Description plate string The plate of the vehicle","title":"Switch vehicle lock"},{"location":"client/switch_lock/#switch-vehicle-lock","text":"Triggering this event (from client side) will switch the lock of the vehicle with that plate, so it will remove all keys to other players that the vehicle owner has previously shared","title":"Switch vehicle lock"},{"location":"client/switch_lock/#event","text":"TriggerServerEvent ( \"vehicles_keys:switchLock\" , plate )","title":"Event"},{"location":"client/switch_lock/#parameters","text":"Name Data Type Description plate string The plate of the vehicle","title":"Parameters"},{"location":"client/notifications/notify/","text":"Replace default notifications Triggered after notifying player client side Event AddEventHandler ( \"vehicles_keys:notify\" , function ( message , uncoloredMessage ) end ) Parameters Name Data Type Description message string Message of the notification uncoloredMessage string Message of the notification but without ~r~, ~g~, etc. Example (you can place it in the folder integrations/cl_integrations.lua of the script) RegisterNetEvent ( \"vehicles_keys:framework:ready\" , function () -- Disables the default script notification (otherwise there would be 2 notifications) exports [ \"vehicles_keys\" ]: disableScriptEvent ( \"vehicles_keys:notify\" ) end ) RegisterNetEvent ( \"vehicles_keys:notify\" , function ( message , uncoloredMessage ) TriggerEvent ( \"external_script:notify\" , message ) end )","title":"Replace default notifications"},{"location":"client/notifications/notify/#replace-default-notifications","text":"Triggered after notifying player client side","title":"Replace default notifications"},{"location":"client/notifications/notify/#event","text":"AddEventHandler ( \"vehicles_keys:notify\" , function ( message , uncoloredMessage ) end )","title":"Event"},{"location":"client/notifications/notify/#parameters","text":"Name Data Type Description message string Message of the notification uncoloredMessage string Message of the notification but without ~r~, ~g~, etc.","title":"Parameters"},{"location":"client/notifications/notify/#example-you-can-place-it-in-the-folder-integrationscl_integrationslua-of-the-script","text":"RegisterNetEvent ( \"vehicles_keys:framework:ready\" , function () -- Disables the default script notification (otherwise there would be 2 notifications) exports [ \"vehicles_keys\" ]: disableScriptEvent ( \"vehicles_keys:notify\" ) end ) RegisterNetEvent ( \"vehicles_keys:notify\" , function ( message , uncoloredMessage ) TriggerEvent ( \"external_script:notify\" , message ) end )","title":"Example (you can place it in the folder integrations/cl_integrations.lua of the script)"},{"location":"client/notifications/showHelpNotification/","text":"Replace default help notifications Used to show the usual Press E to ... at the top left of the player's screen Export exports [ \"vehicles_keys\" ]: replaceShowHelpNotification ( customFunction ) Parameters Name Data Type Description customFunction function A function that will replace the default ESX.ShowHelpNotification method. Requires the message parameter and will be called each frame Example (you can place it in the folder integrations/cl_integrations.lua of the script) local function myCustomHelpNotification ( message ) -- Customize your function to fit your needs print ( message ) ExternalScript . showHelpNotification ( message ) end RegisterNetEvent ( \"vehicles_keys:framework:ready\" , function () -- This will replace the base function with the one you want exports [ \"vehicles_keys\" ]: replaceShowHelpNotification ( myCustomHelpNotification ) end )","title":"Replace default help notifications"},{"location":"client/notifications/showHelpNotification/#replace-default-help-notifications","text":"Used to show the usual Press E to ... at the top left of the player's screen","title":"Replace default help notifications"},{"location":"client/notifications/showHelpNotification/#export","text":"exports [ \"vehicles_keys\" ]: replaceShowHelpNotification ( customFunction )","title":"Export"},{"location":"client/notifications/showHelpNotification/#parameters","text":"Name Data Type Description customFunction function A function that will replace the default ESX.ShowHelpNotification method. Requires the message parameter and will be called each frame","title":"Parameters"},{"location":"client/notifications/showHelpNotification/#example-you-can-place-it-in-the-folder-integrationscl_integrationslua-of-the-script","text":"local function myCustomHelpNotification ( message ) -- Customize your function to fit your needs print ( message ) ExternalScript . showHelpNotification ( message ) end RegisterNetEvent ( \"vehicles_keys:framework:ready\" , function () -- This will replace the base function with the one you want exports [ \"vehicles_keys\" ]: replaceShowHelpNotification ( myCustomHelpNotification ) end )","title":"Example (you can place it in the folder integrations/cl_integrations.lua of the script)"},{"location":"server/giveVehicleKeysToIdentifier/","text":"Give keys to identifier Export exports [ \"vehicles_keys\" ]: giveVehicleKeysToIdentifier ( identifier , plate , type ) Parameters Name Data Type Description identifier string The target player identifier/license plate string The vehicle plate type string (optional) The vehicle type. The default will be \"temporary\". Available types: \"temporary\", \"owned\", \"other_player\" Example RegisterNetEvent ( \"vehicle_shop:playerBoughtVehicle\" , function ( playerId , plate ) local xPlayer = ESX . GetPlayerFromId ( playerId ) local identifier = xPlayer . identifier exports [ \"vehicles_keys\" ]: giveVehicleKeysToIdentifier ( identifier , plate , \"owned\" ) end )","title":"Give keys to identifier"},{"location":"server/giveVehicleKeysToIdentifier/#give-keys-to-identifier","text":"","title":"Give keys to identifier"},{"location":"server/giveVehicleKeysToIdentifier/#export","text":"exports [ \"vehicles_keys\" ]: giveVehicleKeysToIdentifier ( identifier , plate , type )","title":"Export"},{"location":"server/giveVehicleKeysToIdentifier/#parameters","text":"Name Data Type Description identifier string The target player identifier/license plate string The vehicle plate type string (optional) The vehicle type. The default will be \"temporary\". Available types: \"temporary\", \"owned\", \"other_player\"","title":"Parameters"},{"location":"server/giveVehicleKeysToIdentifier/#example","text":"RegisterNetEvent ( \"vehicle_shop:playerBoughtVehicle\" , function ( playerId , plate ) local xPlayer = ESX . GetPlayerFromId ( playerId ) local identifier = xPlayer . identifier exports [ \"vehicles_keys\" ]: giveVehicleKeysToIdentifier ( identifier , plate , \"owned\" ) end )","title":"Example"},{"location":"server/giveVehicleKeysToPlayerId/","text":"Give keys to player ID Export exports [ \"vehicles_keys\" ]: giveVehicleKeysToPlayerId ( playerId , plate , type ) Parameters Name Data Type Description playerId integer The target player server ID plate string The vehicle plate type string (optional) The vehicle type. The default will be \"temporary\". Available types: \"temporary\", \"owned\", \"other_player\" Example RegisterNetEvent ( \"vehicle_shop:playerBoughtVehicle\" , function ( playerId , plate ) local xPlayer = ESX . GetPlayerFromId ( playerId ) exports [ \"vehicles_keys\" ]: giveVehicleKeysToPlayerId ( playerId , plate , \"owned\" ) end )","title":"Give keys to player ID"},{"location":"server/giveVehicleKeysToPlayerId/#give-keys-to-player-id","text":"","title":"Give keys to player ID"},{"location":"server/giveVehicleKeysToPlayerId/#export","text":"exports [ \"vehicles_keys\" ]: giveVehicleKeysToPlayerId ( playerId , plate , type )","title":"Export"},{"location":"server/giveVehicleKeysToPlayerId/#parameters","text":"Name Data Type Description playerId integer The target player server ID plate string The vehicle plate type string (optional) The vehicle type. The default will be \"temporary\". Available types: \"temporary\", \"owned\", \"other_player\"","title":"Parameters"},{"location":"server/giveVehicleKeysToPlayerId/#example","text":"RegisterNetEvent ( \"vehicle_shop:playerBoughtVehicle\" , function ( playerId , plate ) local xPlayer = ESX . GetPlayerFromId ( playerId ) exports [ \"vehicles_keys\" ]: giveVehicleKeysToPlayerId ( playerId , plate , \"owned\" ) end )","title":"Example"},{"location":"server/refreshPlayerOwnedVehicles/","text":"Refresh player owned vehicles Using this export (from server side) will refresh the list of the player's owned vehicles (from owned_vehicles on ESX or player_vehicles on QBCore) Event exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( playerId , instantly ) Parameters Give keys to identifier Name Data Type Description playerId integer The player server ID instantly boolean OPTIONAL - By default, it will wait 2 seconds before actually refreshing, if you know for sure that you need it instantly, pass true as second parameter, otherwise can be empty Example RegisterNetEvent ( \"vehicle_shop:playerBoughtVehicle\" , function ( playerId , plate ) -- This will refresh the player's owned vehicles after he buys a vehicle (just an example) exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( playerId ) end )","title":"Refresh player owned vehicles"},{"location":"server/refreshPlayerOwnedVehicles/#refresh-player-owned-vehicles","text":"Using this export (from server side) will refresh the list of the player's owned vehicles (from owned_vehicles on ESX or player_vehicles on QBCore)","title":"Refresh player owned vehicles"},{"location":"server/refreshPlayerOwnedVehicles/#event","text":"exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( playerId , instantly )","title":"Event"},{"location":"server/refreshPlayerOwnedVehicles/#parameters","text":"","title":"Parameters"},{"location":"server/refreshPlayerOwnedVehicles/#give-keys-to-identifier","text":"Name Data Type Description playerId integer The player server ID instantly boolean OPTIONAL - By default, it will wait 2 seconds before actually refreshing, if you know for sure that you need it instantly, pass true as second parameter, otherwise can be empty","title":"Give keys to identifier"},{"location":"server/refreshPlayerOwnedVehicles/#example","text":"RegisterNetEvent ( \"vehicle_shop:playerBoughtVehicle\" , function ( playerId , plate ) -- This will refresh the player's owned vehicles after he buys a vehicle (just an example) exports [ \"vehicles_keys\" ]: refreshPlayerOwnedVehicles ( playerId ) end )","title":"Example"},{"location":"server/vehicleWindowBroken/","text":"Vehicle window broken Event RegisterNetEvent ( \"vehicles_keys:vehicleWindowBroken\" , function ( playerId , vehicleNetId ) end ) Parameters Name Data Type Description playerId integer The player server ID who broke the window vehicleNetId integer (net ID) The vehicle network ID Example RegisterNetEvent ( \"vehicles_keys:vehicleWindowBroken\" , function ( playerId , vehicleNetId ) local vehicle = NetworkGetEntityFromNetworkId ( vehicleNetId ) print ( GetPlayerName ( playerId ) .. \" broke the window of plate \" .. GetVehicleNumberPlateText ( vehicle )) end )","title":"Vehicle window broken"},{"location":"server/vehicleWindowBroken/#vehicle-window-broken","text":"","title":"Vehicle window broken"},{"location":"server/vehicleWindowBroken/#event","text":"RegisterNetEvent ( \"vehicles_keys:vehicleWindowBroken\" , function ( playerId , vehicleNetId ) end )","title":"Event"},{"location":"server/vehicleWindowBroken/#parameters","text":"Name Data Type Description playerId integer The player server ID who broke the window vehicleNetId integer (net ID) The vehicle network ID","title":"Parameters"},{"location":"server/vehicleWindowBroken/#example","text":"RegisterNetEvent ( \"vehicles_keys:vehicleWindowBroken\" , function ( playerId , vehicleNetId ) local vehicle = NetworkGetEntityFromNetworkId ( vehicleNetId ) print ( GetPlayerName ( playerId ) .. \" broke the window of plate \" .. GetVehicleNumberPlateText ( vehicle )) end )","title":"Example"}]}